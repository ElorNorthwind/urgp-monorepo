/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OldbuildingsImport } from './routes/oldbuildings'
import { Route as LoginImport } from './routes/login'
import { Route as RenovationRouteImport } from './routes/renovation/route'
import { Route as RenovationIndexImport } from './routes/renovation/index'
import { Route as RenovationStagesImport } from './routes/renovation/stages'
import { Route as RenovationOldbuildingsImport } from './routes/renovation/oldbuildings'
import { Route as RenovationOldapartmentsImport } from './routes/renovation/oldapartments'
import { Route as RenovationMessagesImport } from './routes/renovation/messages'
import { Route as RenovationBuildingRelocationMapImport } from './routes/renovation/building-relocation-map'
import { Route as RenovationSettingsRouteImport } from './routes/renovation/settings/route'
import { Route as RenovationSettingsIndexImport } from './routes/renovation/settings/index'
import { Route as RenovationSettingsChangePasswordImport } from './routes/renovation/settings/change-password'

// Create Virtual Routes

const MapLazyImport = createFileRoute('/map')()
const BticalcLazyImport = createFileRoute('/bticalc')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const MapLazyRoute = MapLazyImport.update({
  path: '/map',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/map.lazy').then((d) => d.Route))

const BticalcLazyRoute = BticalcLazyImport.update({
  path: '/bticalc',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/bticalc.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const OldbuildingsRoute = OldbuildingsImport.update({
  path: '/oldbuildings',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const RenovationRouteRoute = RenovationRouteImport.update({
  path: '/renovation',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RenovationIndexRoute = RenovationIndexImport.update({
  path: '/',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationStagesRoute = RenovationStagesImport.update({
  path: '/stages',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationOldbuildingsRoute = RenovationOldbuildingsImport.update({
  path: '/oldbuildings',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationOldapartmentsRoute = RenovationOldapartmentsImport.update({
  path: '/oldapartments',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationMessagesRoute = RenovationMessagesImport.update({
  path: '/messages',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationBuildingRelocationMapRoute =
  RenovationBuildingRelocationMapImport.update({
    path: '/building-relocation-map',
    getParentRoute: () => RenovationRouteRoute,
  } as any)

const RenovationSettingsRouteRoute = RenovationSettingsRouteImport.update({
  path: '/settings',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationSettingsIndexRoute = RenovationSettingsIndexImport.update({
  path: '/',
  getParentRoute: () => RenovationSettingsRouteRoute,
} as any)

const RenovationSettingsChangePasswordRoute =
  RenovationSettingsChangePasswordImport.update({
    path: '/change-password',
    getParentRoute: () => RenovationSettingsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/renovation': {
      preLoaderRoute: typeof RenovationRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/oldbuildings': {
      preLoaderRoute: typeof OldbuildingsImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/bticalc': {
      preLoaderRoute: typeof BticalcLazyImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      preLoaderRoute: typeof MapLazyImport
      parentRoute: typeof rootRoute
    }
    '/renovation/settings': {
      preLoaderRoute: typeof RenovationSettingsRouteImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/building-relocation-map': {
      preLoaderRoute: typeof RenovationBuildingRelocationMapImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/messages': {
      preLoaderRoute: typeof RenovationMessagesImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/oldapartments': {
      preLoaderRoute: typeof RenovationOldapartmentsImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/oldbuildings': {
      preLoaderRoute: typeof RenovationOldbuildingsImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/stages': {
      preLoaderRoute: typeof RenovationStagesImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/': {
      preLoaderRoute: typeof RenovationIndexImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/settings/change-password': {
      preLoaderRoute: typeof RenovationSettingsChangePasswordImport
      parentRoute: typeof RenovationSettingsRouteImport
    }
    '/renovation/settings/': {
      preLoaderRoute: typeof RenovationSettingsIndexImport
      parentRoute: typeof RenovationSettingsRouteImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  RenovationRouteRoute.addChildren([
    RenovationSettingsRouteRoute.addChildren([
      RenovationSettingsChangePasswordRoute,
      RenovationSettingsIndexRoute,
    ]),
    RenovationBuildingRelocationMapRoute,
    RenovationMessagesRoute,
    RenovationOldapartmentsRoute,
    RenovationOldbuildingsRoute,
    RenovationStagesRoute,
    RenovationIndexRoute,
  ]),
  LoginRoute,
  OldbuildingsRoute,
  AboutLazyRoute,
  BticalcLazyRoute,
  MapLazyRoute,
])

/* prettier-ignore-end */
