/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OldbuildingsImport } from './routes/oldbuildings'
import { Route as LoginImport } from './routes/login'
import { Route as RenovationRouteImport } from './routes/renovation/route'
import { Route as ControlRouteImport } from './routes/control/route'
import { Route as AddressRouteImport } from './routes/address/route'
import { Route as RenovationIndexImport } from './routes/renovation/index'
import { Route as ControlIndexImport } from './routes/control/index'
import { Route as AddressIndexImport } from './routes/address/index'
import { Route as RenovationStagesImport } from './routes/renovation/stages'
import { Route as RenovationOldbuildingsImport } from './routes/renovation/oldbuildings'
import { Route as RenovationOldapartmentsImport } from './routes/renovation/oldapartments'
import { Route as RenovationMessagesImport } from './routes/renovation/messages'
import { Route as RenovationBuildingRelocationMapImport } from './routes/renovation/building-relocation-map'
import { Route as ControlProblemsImport } from './routes/control/problems'
import { Route as ControlPendingImport } from './routes/control/pending'
import { Route as ControlCasesImport } from './routes/control/cases'
import { Route as ControlCaseImport } from './routes/control/case'
import { Route as AddressSessionsImport } from './routes/address/sessions'
import { Route as RenovationSettingsRouteImport } from './routes/renovation/settings/route'
import { Route as ControlSettingsRouteImport } from './routes/control/settings/route'
import { Route as RenovationSettingsIndexImport } from './routes/renovation/settings/index'
import { Route as ControlSettingsIndexImport } from './routes/control/settings/index'
import { Route as RenovationSettingsChangePasswordImport } from './routes/renovation/settings/change-password'
import { Route as ControlSettingsFilterImport } from './routes/control/settings/filter'
import { Route as ControlSettingsChangePasswordImport } from './routes/control/settings/change-password'
import { Route as ControlSettingsApproveChainImport } from './routes/control/settings/approve-chain'

// Create Virtual Routes

const MapLazyImport = createFileRoute('/map')()
const BticalcLazyImport = createFileRoute('/bticalc')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const MapLazyRoute = MapLazyImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/map.lazy').then((d) => d.Route))

const BticalcLazyRoute = BticalcLazyImport.update({
  id: '/bticalc',
  path: '/bticalc',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/bticalc.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const OldbuildingsRoute = OldbuildingsImport.update({
  id: '/oldbuildings',
  path: '/oldbuildings',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const RenovationRouteRoute = RenovationRouteImport.update({
  id: '/renovation',
  path: '/renovation',
  getParentRoute: () => rootRoute,
} as any)

const ControlRouteRoute = ControlRouteImport.update({
  id: '/control',
  path: '/control',
  getParentRoute: () => rootRoute,
} as any)

const AddressRouteRoute = AddressRouteImport.update({
  id: '/address',
  path: '/address',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RenovationIndexRoute = RenovationIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const ControlIndexRoute = ControlIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ControlRouteRoute,
} as any)

const AddressIndexRoute = AddressIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AddressRouteRoute,
} as any)

const RenovationStagesRoute = RenovationStagesImport.update({
  id: '/stages',
  path: '/stages',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationOldbuildingsRoute = RenovationOldbuildingsImport.update({
  id: '/oldbuildings',
  path: '/oldbuildings',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationOldapartmentsRoute = RenovationOldapartmentsImport.update({
  id: '/oldapartments',
  path: '/oldapartments',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationMessagesRoute = RenovationMessagesImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const RenovationBuildingRelocationMapRoute =
  RenovationBuildingRelocationMapImport.update({
    id: '/building-relocation-map',
    path: '/building-relocation-map',
    getParentRoute: () => RenovationRouteRoute,
  } as any)

const ControlProblemsRoute = ControlProblemsImport.update({
  id: '/problems',
  path: '/problems',
  getParentRoute: () => ControlRouteRoute,
} as any)

const ControlPendingRoute = ControlPendingImport.update({
  id: '/pending',
  path: '/pending',
  getParentRoute: () => ControlRouteRoute,
} as any)

const ControlCasesRoute = ControlCasesImport.update({
  id: '/cases',
  path: '/cases',
  getParentRoute: () => ControlRouteRoute,
} as any)

const ControlCaseRoute = ControlCaseImport.update({
  id: '/case',
  path: '/case',
  getParentRoute: () => ControlRouteRoute,
} as any)

const AddressSessionsRoute = AddressSessionsImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => AddressRouteRoute,
} as any)

const RenovationSettingsRouteRoute = RenovationSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => RenovationRouteRoute,
} as any)

const ControlSettingsRouteRoute = ControlSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ControlRouteRoute,
} as any)

const RenovationSettingsIndexRoute = RenovationSettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RenovationSettingsRouteRoute,
} as any)

const ControlSettingsIndexRoute = ControlSettingsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ControlSettingsRouteRoute,
} as any)

const RenovationSettingsChangePasswordRoute =
  RenovationSettingsChangePasswordImport.update({
    id: '/change-password',
    path: '/change-password',
    getParentRoute: () => RenovationSettingsRouteRoute,
  } as any)

const ControlSettingsFilterRoute = ControlSettingsFilterImport.update({
  id: '/filter',
  path: '/filter',
  getParentRoute: () => ControlSettingsRouteRoute,
} as any)

const ControlSettingsChangePasswordRoute =
  ControlSettingsChangePasswordImport.update({
    id: '/change-password',
    path: '/change-password',
    getParentRoute: () => ControlSettingsRouteRoute,
  } as any)

const ControlSettingsApproveChainRoute =
  ControlSettingsApproveChainImport.update({
    id: '/approve-chain',
    path: '/approve-chain',
    getParentRoute: () => ControlSettingsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/address': {
      id: '/address'
      path: '/address'
      fullPath: '/address'
      preLoaderRoute: typeof AddressRouteImport
      parentRoute: typeof rootRoute
    }
    '/control': {
      id: '/control'
      path: '/control'
      fullPath: '/control'
      preLoaderRoute: typeof ControlRouteImport
      parentRoute: typeof rootRoute
    }
    '/renovation': {
      id: '/renovation'
      path: '/renovation'
      fullPath: '/renovation'
      preLoaderRoute: typeof RenovationRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/oldbuildings': {
      id: '/oldbuildings'
      path: '/oldbuildings'
      fullPath: '/oldbuildings'
      preLoaderRoute: typeof OldbuildingsImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/bticalc': {
      id: '/bticalc'
      path: '/bticalc'
      fullPath: '/bticalc'
      preLoaderRoute: typeof BticalcLazyImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapLazyImport
      parentRoute: typeof rootRoute
    }
    '/control/settings': {
      id: '/control/settings'
      path: '/settings'
      fullPath: '/control/settings'
      preLoaderRoute: typeof ControlSettingsRouteImport
      parentRoute: typeof ControlRouteImport
    }
    '/renovation/settings': {
      id: '/renovation/settings'
      path: '/settings'
      fullPath: '/renovation/settings'
      preLoaderRoute: typeof RenovationSettingsRouteImport
      parentRoute: typeof RenovationRouteImport
    }
    '/address/sessions': {
      id: '/address/sessions'
      path: '/sessions'
      fullPath: '/address/sessions'
      preLoaderRoute: typeof AddressSessionsImport
      parentRoute: typeof AddressRouteImport
    }
    '/control/case': {
      id: '/control/case'
      path: '/case'
      fullPath: '/control/case'
      preLoaderRoute: typeof ControlCaseImport
      parentRoute: typeof ControlRouteImport
    }
    '/control/cases': {
      id: '/control/cases'
      path: '/cases'
      fullPath: '/control/cases'
      preLoaderRoute: typeof ControlCasesImport
      parentRoute: typeof ControlRouteImport
    }
    '/control/pending': {
      id: '/control/pending'
      path: '/pending'
      fullPath: '/control/pending'
      preLoaderRoute: typeof ControlPendingImport
      parentRoute: typeof ControlRouteImport
    }
    '/control/problems': {
      id: '/control/problems'
      path: '/problems'
      fullPath: '/control/problems'
      preLoaderRoute: typeof ControlProblemsImport
      parentRoute: typeof ControlRouteImport
    }
    '/renovation/building-relocation-map': {
      id: '/renovation/building-relocation-map'
      path: '/building-relocation-map'
      fullPath: '/renovation/building-relocation-map'
      preLoaderRoute: typeof RenovationBuildingRelocationMapImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/messages': {
      id: '/renovation/messages'
      path: '/messages'
      fullPath: '/renovation/messages'
      preLoaderRoute: typeof RenovationMessagesImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/oldapartments': {
      id: '/renovation/oldapartments'
      path: '/oldapartments'
      fullPath: '/renovation/oldapartments'
      preLoaderRoute: typeof RenovationOldapartmentsImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/oldbuildings': {
      id: '/renovation/oldbuildings'
      path: '/oldbuildings'
      fullPath: '/renovation/oldbuildings'
      preLoaderRoute: typeof RenovationOldbuildingsImport
      parentRoute: typeof RenovationRouteImport
    }
    '/renovation/stages': {
      id: '/renovation/stages'
      path: '/stages'
      fullPath: '/renovation/stages'
      preLoaderRoute: typeof RenovationStagesImport
      parentRoute: typeof RenovationRouteImport
    }
    '/address/': {
      id: '/address/'
      path: '/'
      fullPath: '/address/'
      preLoaderRoute: typeof AddressIndexImport
      parentRoute: typeof AddressRouteImport
    }
    '/control/': {
      id: '/control/'
      path: '/'
      fullPath: '/control/'
      preLoaderRoute: typeof ControlIndexImport
      parentRoute: typeof ControlRouteImport
    }
    '/renovation/': {
      id: '/renovation/'
      path: '/'
      fullPath: '/renovation/'
      preLoaderRoute: typeof RenovationIndexImport
      parentRoute: typeof RenovationRouteImport
    }
    '/control/settings/approve-chain': {
      id: '/control/settings/approve-chain'
      path: '/approve-chain'
      fullPath: '/control/settings/approve-chain'
      preLoaderRoute: typeof ControlSettingsApproveChainImport
      parentRoute: typeof ControlSettingsRouteImport
    }
    '/control/settings/change-password': {
      id: '/control/settings/change-password'
      path: '/change-password'
      fullPath: '/control/settings/change-password'
      preLoaderRoute: typeof ControlSettingsChangePasswordImport
      parentRoute: typeof ControlSettingsRouteImport
    }
    '/control/settings/filter': {
      id: '/control/settings/filter'
      path: '/filter'
      fullPath: '/control/settings/filter'
      preLoaderRoute: typeof ControlSettingsFilterImport
      parentRoute: typeof ControlSettingsRouteImport
    }
    '/renovation/settings/change-password': {
      id: '/renovation/settings/change-password'
      path: '/change-password'
      fullPath: '/renovation/settings/change-password'
      preLoaderRoute: typeof RenovationSettingsChangePasswordImport
      parentRoute: typeof RenovationSettingsRouteImport
    }
    '/control/settings/': {
      id: '/control/settings/'
      path: '/'
      fullPath: '/control/settings/'
      preLoaderRoute: typeof ControlSettingsIndexImport
      parentRoute: typeof ControlSettingsRouteImport
    }
    '/renovation/settings/': {
      id: '/renovation/settings/'
      path: '/'
      fullPath: '/renovation/settings/'
      preLoaderRoute: typeof RenovationSettingsIndexImport
      parentRoute: typeof RenovationSettingsRouteImport
    }
  }
}

// Create and export the route tree

interface AddressRouteRouteChildren {
  AddressSessionsRoute: typeof AddressSessionsRoute
  AddressIndexRoute: typeof AddressIndexRoute
}

const AddressRouteRouteChildren: AddressRouteRouteChildren = {
  AddressSessionsRoute: AddressSessionsRoute,
  AddressIndexRoute: AddressIndexRoute,
}

const AddressRouteRouteWithChildren = AddressRouteRoute._addFileChildren(
  AddressRouteRouteChildren,
)

interface ControlSettingsRouteRouteChildren {
  ControlSettingsApproveChainRoute: typeof ControlSettingsApproveChainRoute
  ControlSettingsChangePasswordRoute: typeof ControlSettingsChangePasswordRoute
  ControlSettingsFilterRoute: typeof ControlSettingsFilterRoute
  ControlSettingsIndexRoute: typeof ControlSettingsIndexRoute
}

const ControlSettingsRouteRouteChildren: ControlSettingsRouteRouteChildren = {
  ControlSettingsApproveChainRoute: ControlSettingsApproveChainRoute,
  ControlSettingsChangePasswordRoute: ControlSettingsChangePasswordRoute,
  ControlSettingsFilterRoute: ControlSettingsFilterRoute,
  ControlSettingsIndexRoute: ControlSettingsIndexRoute,
}

const ControlSettingsRouteRouteWithChildren =
  ControlSettingsRouteRoute._addFileChildren(ControlSettingsRouteRouteChildren)

interface ControlRouteRouteChildren {
  ControlSettingsRouteRoute: typeof ControlSettingsRouteRouteWithChildren
  ControlCaseRoute: typeof ControlCaseRoute
  ControlCasesRoute: typeof ControlCasesRoute
  ControlPendingRoute: typeof ControlPendingRoute
  ControlProblemsRoute: typeof ControlProblemsRoute
  ControlIndexRoute: typeof ControlIndexRoute
}

const ControlRouteRouteChildren: ControlRouteRouteChildren = {
  ControlSettingsRouteRoute: ControlSettingsRouteRouteWithChildren,
  ControlCaseRoute: ControlCaseRoute,
  ControlCasesRoute: ControlCasesRoute,
  ControlPendingRoute: ControlPendingRoute,
  ControlProblemsRoute: ControlProblemsRoute,
  ControlIndexRoute: ControlIndexRoute,
}

const ControlRouteRouteWithChildren = ControlRouteRoute._addFileChildren(
  ControlRouteRouteChildren,
)

interface RenovationSettingsRouteRouteChildren {
  RenovationSettingsChangePasswordRoute: typeof RenovationSettingsChangePasswordRoute
  RenovationSettingsIndexRoute: typeof RenovationSettingsIndexRoute
}

const RenovationSettingsRouteRouteChildren: RenovationSettingsRouteRouteChildren =
  {
    RenovationSettingsChangePasswordRoute:
      RenovationSettingsChangePasswordRoute,
    RenovationSettingsIndexRoute: RenovationSettingsIndexRoute,
  }

const RenovationSettingsRouteRouteWithChildren =
  RenovationSettingsRouteRoute._addFileChildren(
    RenovationSettingsRouteRouteChildren,
  )

interface RenovationRouteRouteChildren {
  RenovationSettingsRouteRoute: typeof RenovationSettingsRouteRouteWithChildren
  RenovationBuildingRelocationMapRoute: typeof RenovationBuildingRelocationMapRoute
  RenovationMessagesRoute: typeof RenovationMessagesRoute
  RenovationOldapartmentsRoute: typeof RenovationOldapartmentsRoute
  RenovationOldbuildingsRoute: typeof RenovationOldbuildingsRoute
  RenovationStagesRoute: typeof RenovationStagesRoute
  RenovationIndexRoute: typeof RenovationIndexRoute
}

const RenovationRouteRouteChildren: RenovationRouteRouteChildren = {
  RenovationSettingsRouteRoute: RenovationSettingsRouteRouteWithChildren,
  RenovationBuildingRelocationMapRoute: RenovationBuildingRelocationMapRoute,
  RenovationMessagesRoute: RenovationMessagesRoute,
  RenovationOldapartmentsRoute: RenovationOldapartmentsRoute,
  RenovationOldbuildingsRoute: RenovationOldbuildingsRoute,
  RenovationStagesRoute: RenovationStagesRoute,
  RenovationIndexRoute: RenovationIndexRoute,
}

const RenovationRouteRouteWithChildren = RenovationRouteRoute._addFileChildren(
  RenovationRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/address': typeof AddressRouteRouteWithChildren
  '/control': typeof ControlRouteRouteWithChildren
  '/renovation': typeof RenovationRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/oldbuildings': typeof OldbuildingsRoute
  '/about': typeof AboutLazyRoute
  '/bticalc': typeof BticalcLazyRoute
  '/map': typeof MapLazyRoute
  '/control/settings': typeof ControlSettingsRouteRouteWithChildren
  '/renovation/settings': typeof RenovationSettingsRouteRouteWithChildren
  '/address/sessions': typeof AddressSessionsRoute
  '/control/case': typeof ControlCaseRoute
  '/control/cases': typeof ControlCasesRoute
  '/control/pending': typeof ControlPendingRoute
  '/control/problems': typeof ControlProblemsRoute
  '/renovation/building-relocation-map': typeof RenovationBuildingRelocationMapRoute
  '/renovation/messages': typeof RenovationMessagesRoute
  '/renovation/oldapartments': typeof RenovationOldapartmentsRoute
  '/renovation/oldbuildings': typeof RenovationOldbuildingsRoute
  '/renovation/stages': typeof RenovationStagesRoute
  '/address/': typeof AddressIndexRoute
  '/control/': typeof ControlIndexRoute
  '/renovation/': typeof RenovationIndexRoute
  '/control/settings/approve-chain': typeof ControlSettingsApproveChainRoute
  '/control/settings/change-password': typeof ControlSettingsChangePasswordRoute
  '/control/settings/filter': typeof ControlSettingsFilterRoute
  '/renovation/settings/change-password': typeof RenovationSettingsChangePasswordRoute
  '/control/settings/': typeof ControlSettingsIndexRoute
  '/renovation/settings/': typeof RenovationSettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/oldbuildings': typeof OldbuildingsRoute
  '/about': typeof AboutLazyRoute
  '/bticalc': typeof BticalcLazyRoute
  '/map': typeof MapLazyRoute
  '/address/sessions': typeof AddressSessionsRoute
  '/control/case': typeof ControlCaseRoute
  '/control/cases': typeof ControlCasesRoute
  '/control/pending': typeof ControlPendingRoute
  '/control/problems': typeof ControlProblemsRoute
  '/renovation/building-relocation-map': typeof RenovationBuildingRelocationMapRoute
  '/renovation/messages': typeof RenovationMessagesRoute
  '/renovation/oldapartments': typeof RenovationOldapartmentsRoute
  '/renovation/oldbuildings': typeof RenovationOldbuildingsRoute
  '/renovation/stages': typeof RenovationStagesRoute
  '/address': typeof AddressIndexRoute
  '/control': typeof ControlIndexRoute
  '/renovation': typeof RenovationIndexRoute
  '/control/settings/approve-chain': typeof ControlSettingsApproveChainRoute
  '/control/settings/change-password': typeof ControlSettingsChangePasswordRoute
  '/control/settings/filter': typeof ControlSettingsFilterRoute
  '/renovation/settings/change-password': typeof RenovationSettingsChangePasswordRoute
  '/control/settings': typeof ControlSettingsIndexRoute
  '/renovation/settings': typeof RenovationSettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/address': typeof AddressRouteRouteWithChildren
  '/control': typeof ControlRouteRouteWithChildren
  '/renovation': typeof RenovationRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/oldbuildings': typeof OldbuildingsRoute
  '/about': typeof AboutLazyRoute
  '/bticalc': typeof BticalcLazyRoute
  '/map': typeof MapLazyRoute
  '/control/settings': typeof ControlSettingsRouteRouteWithChildren
  '/renovation/settings': typeof RenovationSettingsRouteRouteWithChildren
  '/address/sessions': typeof AddressSessionsRoute
  '/control/case': typeof ControlCaseRoute
  '/control/cases': typeof ControlCasesRoute
  '/control/pending': typeof ControlPendingRoute
  '/control/problems': typeof ControlProblemsRoute
  '/renovation/building-relocation-map': typeof RenovationBuildingRelocationMapRoute
  '/renovation/messages': typeof RenovationMessagesRoute
  '/renovation/oldapartments': typeof RenovationOldapartmentsRoute
  '/renovation/oldbuildings': typeof RenovationOldbuildingsRoute
  '/renovation/stages': typeof RenovationStagesRoute
  '/address/': typeof AddressIndexRoute
  '/control/': typeof ControlIndexRoute
  '/renovation/': typeof RenovationIndexRoute
  '/control/settings/approve-chain': typeof ControlSettingsApproveChainRoute
  '/control/settings/change-password': typeof ControlSettingsChangePasswordRoute
  '/control/settings/filter': typeof ControlSettingsFilterRoute
  '/renovation/settings/change-password': typeof RenovationSettingsChangePasswordRoute
  '/control/settings/': typeof ControlSettingsIndexRoute
  '/renovation/settings/': typeof RenovationSettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/address'
    | '/control'
    | '/renovation'
    | '/login'
    | '/oldbuildings'
    | '/about'
    | '/bticalc'
    | '/map'
    | '/control/settings'
    | '/renovation/settings'
    | '/address/sessions'
    | '/control/case'
    | '/control/cases'
    | '/control/pending'
    | '/control/problems'
    | '/renovation/building-relocation-map'
    | '/renovation/messages'
    | '/renovation/oldapartments'
    | '/renovation/oldbuildings'
    | '/renovation/stages'
    | '/address/'
    | '/control/'
    | '/renovation/'
    | '/control/settings/approve-chain'
    | '/control/settings/change-password'
    | '/control/settings/filter'
    | '/renovation/settings/change-password'
    | '/control/settings/'
    | '/renovation/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/oldbuildings'
    | '/about'
    | '/bticalc'
    | '/map'
    | '/address/sessions'
    | '/control/case'
    | '/control/cases'
    | '/control/pending'
    | '/control/problems'
    | '/renovation/building-relocation-map'
    | '/renovation/messages'
    | '/renovation/oldapartments'
    | '/renovation/oldbuildings'
    | '/renovation/stages'
    | '/address'
    | '/control'
    | '/renovation'
    | '/control/settings/approve-chain'
    | '/control/settings/change-password'
    | '/control/settings/filter'
    | '/renovation/settings/change-password'
    | '/control/settings'
    | '/renovation/settings'
  id:
    | '__root__'
    | '/'
    | '/address'
    | '/control'
    | '/renovation'
    | '/login'
    | '/oldbuildings'
    | '/about'
    | '/bticalc'
    | '/map'
    | '/control/settings'
    | '/renovation/settings'
    | '/address/sessions'
    | '/control/case'
    | '/control/cases'
    | '/control/pending'
    | '/control/problems'
    | '/renovation/building-relocation-map'
    | '/renovation/messages'
    | '/renovation/oldapartments'
    | '/renovation/oldbuildings'
    | '/renovation/stages'
    | '/address/'
    | '/control/'
    | '/renovation/'
    | '/control/settings/approve-chain'
    | '/control/settings/change-password'
    | '/control/settings/filter'
    | '/renovation/settings/change-password'
    | '/control/settings/'
    | '/renovation/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AddressRouteRoute: typeof AddressRouteRouteWithChildren
  ControlRouteRoute: typeof ControlRouteRouteWithChildren
  RenovationRouteRoute: typeof RenovationRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  OldbuildingsRoute: typeof OldbuildingsRoute
  AboutLazyRoute: typeof AboutLazyRoute
  BticalcLazyRoute: typeof BticalcLazyRoute
  MapLazyRoute: typeof MapLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AddressRouteRoute: AddressRouteRouteWithChildren,
  ControlRouteRoute: ControlRouteRouteWithChildren,
  RenovationRouteRoute: RenovationRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  OldbuildingsRoute: OldbuildingsRoute,
  AboutLazyRoute: AboutLazyRoute,
  BticalcLazyRoute: BticalcLazyRoute,
  MapLazyRoute: MapLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/address",
        "/control",
        "/renovation",
        "/login",
        "/oldbuildings",
        "/about",
        "/bticalc",
        "/map"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/address": {
      "filePath": "address/route.tsx",
      "children": [
        "/address/sessions",
        "/address/"
      ]
    },
    "/control": {
      "filePath": "control/route.tsx",
      "children": [
        "/control/settings",
        "/control/case",
        "/control/cases",
        "/control/pending",
        "/control/problems",
        "/control/"
      ]
    },
    "/renovation": {
      "filePath": "renovation/route.tsx",
      "children": [
        "/renovation/settings",
        "/renovation/building-relocation-map",
        "/renovation/messages",
        "/renovation/oldapartments",
        "/renovation/oldbuildings",
        "/renovation/stages",
        "/renovation/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/oldbuildings": {
      "filePath": "oldbuildings.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/bticalc": {
      "filePath": "bticalc.lazy.tsx"
    },
    "/map": {
      "filePath": "map.lazy.tsx"
    },
    "/control/settings": {
      "filePath": "control/settings/route.tsx",
      "parent": "/control",
      "children": [
        "/control/settings/approve-chain",
        "/control/settings/change-password",
        "/control/settings/filter",
        "/control/settings/"
      ]
    },
    "/renovation/settings": {
      "filePath": "renovation/settings/route.tsx",
      "parent": "/renovation",
      "children": [
        "/renovation/settings/change-password",
        "/renovation/settings/"
      ]
    },
    "/address/sessions": {
      "filePath": "address/sessions.tsx",
      "parent": "/address"
    },
    "/control/case": {
      "filePath": "control/case.tsx",
      "parent": "/control"
    },
    "/control/cases": {
      "filePath": "control/cases.tsx",
      "parent": "/control"
    },
    "/control/pending": {
      "filePath": "control/pending.tsx",
      "parent": "/control"
    },
    "/control/problems": {
      "filePath": "control/problems.tsx",
      "parent": "/control"
    },
    "/renovation/building-relocation-map": {
      "filePath": "renovation/building-relocation-map.tsx",
      "parent": "/renovation"
    },
    "/renovation/messages": {
      "filePath": "renovation/messages.tsx",
      "parent": "/renovation"
    },
    "/renovation/oldapartments": {
      "filePath": "renovation/oldapartments.tsx",
      "parent": "/renovation"
    },
    "/renovation/oldbuildings": {
      "filePath": "renovation/oldbuildings.tsx",
      "parent": "/renovation"
    },
    "/renovation/stages": {
      "filePath": "renovation/stages.tsx",
      "parent": "/renovation"
    },
    "/address/": {
      "filePath": "address/index.tsx",
      "parent": "/address"
    },
    "/control/": {
      "filePath": "control/index.tsx",
      "parent": "/control"
    },
    "/renovation/": {
      "filePath": "renovation/index.tsx",
      "parent": "/renovation"
    },
    "/control/settings/approve-chain": {
      "filePath": "control/settings/approve-chain.tsx",
      "parent": "/control/settings"
    },
    "/control/settings/change-password": {
      "filePath": "control/settings/change-password.tsx",
      "parent": "/control/settings"
    },
    "/control/settings/filter": {
      "filePath": "control/settings/filter.tsx",
      "parent": "/control/settings"
    },
    "/renovation/settings/change-password": {
      "filePath": "renovation/settings/change-password.tsx",
      "parent": "/renovation/settings"
    },
    "/control/settings/": {
      "filePath": "control/settings/index.tsx",
      "parent": "/control/settings"
    },
    "/renovation/settings/": {
      "filePath": "renovation/settings/index.tsx",
      "parent": "/renovation/settings"
    }
  }
}
ROUTE_MANIFEST_END */
