import { AdressRegistryRow, DataMosAdress } from '../../config/types';
import { calculateStreetFromDataMos } from './calculateStreetFromDataMos';

export const convertDataMosAdress = (
  objects: DataMosAdress[],
): AdressRegistryRow[] => {
  return objects.map((obj) => ({
    global_id: BigInt(obj.global_id),
    on_territory_of_moscow: obj.Cells.OnTerritoryOfMoscow === 'да',
    unom: obj.Cells.UNOM,
    address: obj.Cells.ADDRESS,
    simple_address: obj.Cells.SIMPLE_ADDRESS,
    adm_area: obj.Cells.ADM_AREA,
    district: obj.Cells.DISTRICT,
    nreg: obj.Cells.NREG,
    dreg: obj.Cells.DREG === '' ? null : obj.Cells.DREG,
    n_fias: obj.Cells.N_FIAS,
    d_fias: obj.Cells.D_FIAS === '' ? null : obj.Cells.D_FIAS,
    kladr: obj.Cells.KLADR,
    tdoc: obj.Cells.TDOC,
    ndoc: obj.Cells.NDOC,
    ddoc: obj.Cells.DDOC === '' ? null : obj.Cells.DDOC,
    obj_type: obj.Cells.OBJ_TYPE,
    adr_type: obj.Cells.ADR_TYPE,
    vid: obj.Cells.VID,
    sostad: obj.Cells.SOSTAD,
    status: obj.Cells.STATUS,
    kad_n: obj.Cells.KAD_N.map((n) => n.KAD_N),
    kad_zu: obj.Cells.KAD_ZU.map((z) => z.KAD_ZU),
    // outline: `ST_GeomFromGeoJSON('${JSON.stringify(obj.Cells.geoData)}')`,
    p0: obj.Cells.P0,
    p1: obj.Cells.P1,
    p2: obj.Cells.P2,
    p3: obj.Cells.P3,
    p4: obj.Cells.P4,
    p5: obj.Cells.P5,
    p6: obj.Cells.P6,
    p7: obj.Cells.P7,
    p90: obj.Cells.P90,
    p91: obj.Cells.P91,
    l1_type: obj.Cells.L1_TYPE,
    l1_value: obj.Cells.L1_VALUE,
    l2_type: obj.Cells.L2_TYPE,
    l2_value: obj.Cells.L2_VALUE,
    l3_type: obj.Cells.L3_TYPE,
    l3_value: obj.Cells.L3_VALUE,
    l4_type: obj.Cells.L4_TYPE,
    l4_value: obj.Cells.L4_VALUE,
    l5_type: obj.Cells.L5_TYPE,
    l5_value: obj.Cells.L5_VALUE,
    street_calc: calculateStreetFromDataMos(obj),
  }));
};
