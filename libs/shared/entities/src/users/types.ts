import { CasesPageFilter } from '../cases/dto';

export type User = {
  id: number;
  login: string;
  fio: string;
  roles: string[];
  tokenVersion: number;
  controlData: UserControlData;
};

export type UserWithCredentials = User & {
  password: string;
};

export type UserTokens = {
  accessToken: string;
  refreshToken: string;
};

export type UserAccessTokenInfo = {
  id: number;
  login: string;
  roles: string[];
  iat: number;
  exp: number;
};
export type UserRefreshTokenInfo = {
  id: number;
  tokenVersion: number;
  iat: number;
  exp: number;
};

export type RequestWithUserData = Request & {
  user: User;
};

export type UserControlData = {
  // approvers?: {
  //   cases?: number[];
  //   problems?: number[];
  //   operations?: number[];
  // };
  approveTo: number[];
  roles: string[];
  priority?: number;
};

export type UserControlSettings = {
  directions: number[];
  department: string;
  casesFilter: CasesPageFilter;
};

export type SelectOption<T> = {
  label: string;
  value: T;
};

// export type UserControlApprovers = {
//   cases: Array<SelectOption<number>>;
//   problems: Array<SelectOption<number>>;
//   operations: Array<SelectOption<number>>;
// };

// export type RequestWithAccessToken = Request & {
//   user: UserAccessTokenInfo;
// };
// export type RequestWithRefreshToken = Request & {
//   user: User & { exp: number }; // we get the full user info from bd
// };

// {
//   sub: user.id,
//   login: user.login,
//   roles: user.roles,
// },
// {
//   secret: this.configService.get<string>('JWT_ACCESS_SECRET'),
//   expiresIn: '15m',
// },
// ),
// this.jwtService.signAsync(
// {
//   sub: user.id,
//   tokenVersion: user.tokenVersion,
// },

//  id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
//  login character varying(225) NOT NULL UNIQUE,
//  fio character varying(225),
//  password varchar NOT NULL,
//  salt varchar NOT NULL DEFAULT 'some_salt',
//  refreshTokenVersion integer DEFAULT 1,
//  roles varchar[] DEFAULT array['user']::varchar[],
